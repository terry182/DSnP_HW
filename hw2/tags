!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARROW_DOWN_KEY	cmdCharDef.h	/^   ARROW_DOWN_KEY   = 66 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_DOWN_KEY	cmdCharDef.h	/^   ARROW_DOWN_KEY   = TA_ARROW_DOWN_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_BEGIN	cmdCharDef.h	/^   ARROW_KEY_BEGIN  = ARROW_UP_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_BEGIN	cmdCharDef.h	/^   ARROW_KEY_BEGIN  = TA_ARROW_KEY_BEGIN,$/;"	e	enum:ParseChar
ARROW_KEY_END	cmdCharDef.h	/^   ARROW_KEY_END    = ARROW_LEFT_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_END	cmdCharDef.h	/^   ARROW_KEY_END    = TA_ARROW_KEY_END,$/;"	e	enum:ParseChar
ARROW_KEY_FLAG	cmdCharDef.h	/^   ARROW_KEY_FLAG   = 1 << 8,$/;"	e	enum:ParseChar
ARROW_KEY_FLAG	cmdCharDef.h	/^   ARROW_KEY_FLAG   = TA_ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_KEY_INT	cmdCharDef.h	/^   ARROW_KEY_INT    = 91,$/;"	e	enum:ParseChar
ARROW_KEY_INT	cmdCharDef.h	/^   ARROW_KEY_INT    = TA_ARROW_KEY_INT,$/;"	e	enum:ParseChar
ARROW_LEFT_KEY	cmdCharDef.h	/^   ARROW_LEFT_KEY   = 68 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_LEFT_KEY	cmdCharDef.h	/^   ARROW_LEFT_KEY   = TA_ARROW_LEFT_KEY,$/;"	e	enum:ParseChar
ARROW_RIGHT_KEY	cmdCharDef.h	/^   ARROW_RIGHT_KEY  = 67 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_RIGHT_KEY	cmdCharDef.h	/^   ARROW_RIGHT_KEY  = TA_ARROW_RIGHT_KEY,$/;"	e	enum:ParseChar
ARROW_UP_KEY	cmdCharDef.h	/^   ARROW_UP_KEY     = 65 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_UP_KEY	cmdCharDef.h	/^   ARROW_UP_KEY     = TA_ARROW_UP_KEY,$/;"	e	enum:ParseChar
BACK_SPACE_CHAR	cmdCharDef.h	/^   BACK_SPACE_CHAR  = 8,$/;"	e	enum:ParseChar
BACK_SPACE_CHAR	cmdCharDef.h	/^   BACK_SPACE_CHAR  = TA_BACK_SPACE_CHAR,$/;"	e	enum:ParseChar
BACK_SPACE_KEY	cmdCharDef.h	/^   BACK_SPACE_KEY   = 127,$/;"	e	enum:ParseChar
BACK_SPACE_KEY	cmdCharDef.h	/^   BACK_SPACE_KEY   = TA_BACK_SPACE_KEY,$/;"	e	enum:ParseChar
BEEP_CHAR	cmdCharDef.h	/^   BEEP_CHAR        = 7,$/;"	e	enum:ParseChar
BEEP_CHAR	cmdCharDef.h	/^   BEEP_CHAR        = TA_BEEP_CHAR,$/;"	e	enum:ParseChar
CHAR_DEF_H	cmdCharDef.h	/^#define CHAR_DEF_H$/;"	d
CMD_PARSER_H	cmdParser.h	/^#define CMD_PARSER_H$/;"	d
CmdParser	cmdParser.h	/^   CmdParser() : _readBufPtr(_readBuf), _readBufEnd(_readBuf),$/;"	f	class:CmdParser
CmdParser	cmdParser.h	/^class CmdParser$/;"	c
DELETE_KEY	cmdCharDef.h	/^   DELETE_KEY       = 51 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
DELETE_KEY	cmdCharDef.h	/^   DELETE_KEY       = TA_DELETE_KEY,$/;"	e	enum:ParseChar
END_KEY	cmdCharDef.h	/^   END_KEY          = 52 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
END_KEY	cmdCharDef.h	/^   END_KEY          = TA_END_KEY,$/;"	e	enum:ParseChar
ESC_KEY	cmdCharDef.h	/^   ESC_KEY          = 27,         \/\/ Not printable; used for combo keys$/;"	e	enum:ParseChar
ESC_KEY	cmdCharDef.h	/^   ESC_KEY          = TA_ESC_KEY,         \/\/ Not printable; used for combo keys$/;"	e	enum:ParseChar
HOME_KEY	cmdCharDef.h	/^   HOME_KEY         = 49 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
HOME_KEY	cmdCharDef.h	/^   HOME_KEY         = TA_HOME_KEY,$/;"	e	enum:ParseChar
INPUT_END_KEY	cmdCharDef.h	/^   INPUT_END_KEY    = 4,          \/\/ ctrl-d$/;"	e	enum:ParseChar
INPUT_END_KEY	cmdCharDef.h	/^   INPUT_END_KEY    = TA_INPUT_END_KEY,   \/\/ ctrl-d$/;"	e	enum:ParseChar
INSERT_KEY	cmdCharDef.h	/^   INSERT_KEY       = 50 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
INSERT_KEY	cmdCharDef.h	/^   INSERT_KEY       = TA_INSERT_KEY,$/;"	e	enum:ParseChar
LINE_BEGIN_KEY	cmdCharDef.h	/^   LINE_BEGIN_KEY   = 1,          \/\/ ctrl-a$/;"	e	enum:ParseChar
LINE_BEGIN_KEY	cmdCharDef.h	/^   LINE_BEGIN_KEY   = TA_LINE_BEGIN_KEY,  \/\/ ctrl-a$/;"	e	enum:ParseChar
LINE_END_KEY	cmdCharDef.h	/^   LINE_END_KEY     = 5,          \/\/ ctrl-e$/;"	e	enum:ParseChar
LINE_END_KEY	cmdCharDef.h	/^   LINE_END_KEY     = TA_LINE_END_KEY,    \/\/ ctrl-e$/;"	e	enum:ParseChar
MOD_KEY_BEGIN	cmdCharDef.h	/^   MOD_KEY_BEGIN    = HOME_KEY,$/;"	e	enum:ParseChar
MOD_KEY_BEGIN	cmdCharDef.h	/^   MOD_KEY_BEGIN    = TA_MOD_KEY_BEGIN,$/;"	e	enum:ParseChar
MOD_KEY_DUMMY	cmdCharDef.h	/^   MOD_KEY_DUMMY    = 126,$/;"	e	enum:ParseChar
MOD_KEY_DUMMY	cmdCharDef.h	/^   MOD_KEY_DUMMY    = TA_MOD_KEY_DUMMY,$/;"	e	enum:ParseChar
MOD_KEY_END	cmdCharDef.h	/^   MOD_KEY_END      = PG_DOWN_KEY,$/;"	e	enum:ParseChar
MOD_KEY_END	cmdCharDef.h	/^   MOD_KEY_END      = TA_MOD_KEY_END,$/;"	e	enum:ParseChar
MOD_KEY_FLAG	cmdCharDef.h	/^   MOD_KEY_FLAG     = 1 << 9,$/;"	e	enum:ParseChar
MOD_KEY_FLAG	cmdCharDef.h	/^   MOD_KEY_FLAG     = TA_MOD_KEY_FLAG,$/;"	e	enum:ParseChar
MOD_KEY_INT	cmdCharDef.h	/^   MOD_KEY_INT      = 91,$/;"	e	enum:ParseChar
MOD_KEY_INT	cmdCharDef.h	/^   MOD_KEY_INT      = TA_MOD_KEY_INT,$/;"	e	enum:ParseChar
NEWLINE_KEY	cmdCharDef.h	/^   NEWLINE_KEY      = TA_NEWLINE_KEY,     \/\/ enter('\\n') or ctrl-m$/;"	e	enum:ParseChar
NEWLINE_KEY	cmdCharDef.h	/^   NEWLINE_KEY      = int('\\n'),  \/\/ enter('\\n') or ctrl-m$/;"	e	enum:ParseChar
PARSE_CHAR_END	cmdCharDef.h	/^   PARSE_CHAR_END$/;"	e	enum:ParseChar
PG_DOWN_KEY	cmdCharDef.h	/^   PG_DOWN_KEY      = 54 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
PG_DOWN_KEY	cmdCharDef.h	/^   PG_DOWN_KEY      = TA_PG_DOWN_KEY,$/;"	e	enum:ParseChar
PG_OFFSET	cmdParser.h	/^#define PG_OFFSET /;"	d
PG_UP_KEY	cmdCharDef.h	/^   PG_UP_KEY        = 53 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
PG_UP_KEY	cmdCharDef.h	/^   PG_UP_KEY        = TA_PG_UP_KEY,$/;"	e	enum:ParseChar
ParseChar	cmdCharDef.h	/^enum ParseChar$/;"	g
READ_BUF_SIZE	cmdParser.h	/^#define READ_BUF_SIZE /;"	d
TAB_KEY	cmdCharDef.h	/^   TAB_KEY          = TA_TAB_KEY,         \/\/ tab('\\t') or Ctrl-i$/;"	e	enum:ParseChar
TAB_KEY	cmdCharDef.h	/^   TAB_KEY          = int('\\t'),  \/\/ tab('\\t') or Ctrl-i$/;"	e	enum:ParseChar
TAB_POSITION	cmdParser.h	/^#define TAB_POSITION /;"	d
TA_ARROW_DOWN_KEY	cmdCharDef.h	/^#define TA_ARROW_DOWN_KEY /;"	d
TA_ARROW_KEY_BEGIN	cmdCharDef.h	/^#define TA_ARROW_KEY_BEGIN /;"	d
TA_ARROW_KEY_END	cmdCharDef.h	/^#define TA_ARROW_KEY_END /;"	d
TA_ARROW_KEY_FLAG	cmdCharDef.h	/^#define TA_ARROW_KEY_FLAG /;"	d
TA_ARROW_KEY_INT	cmdCharDef.h	/^#define TA_ARROW_KEY_INT /;"	d
TA_ARROW_LEFT_KEY	cmdCharDef.h	/^#define TA_ARROW_LEFT_KEY /;"	d
TA_ARROW_RIGHT_KEY	cmdCharDef.h	/^#define TA_ARROW_RIGHT_KEY /;"	d
TA_ARROW_UP_KEY	cmdCharDef.h	/^#define TA_ARROW_UP_KEY /;"	d
TA_BACK_SPACE_CHAR	cmdCharDef.h	/^#define TA_BACK_SPACE_CHAR /;"	d
TA_BACK_SPACE_KEY	cmdCharDef.h	/^#define TA_BACK_SPACE_KEY /;"	d
TA_BEEP_CHAR	cmdCharDef.h	/^#define TA_BEEP_CHAR /;"	d
TA_DELETE_KEY	cmdCharDef.h	/^#define TA_DELETE_KEY /;"	d
TA_END_KEY	cmdCharDef.h	/^#define TA_END_KEY /;"	d
TA_ESC_KEY	cmdCharDef.h	/^#define TA_ESC_KEY /;"	d
TA_HOME_KEY	cmdCharDef.h	/^#define TA_HOME_KEY /;"	d
TA_INPUT_END_KEY	cmdCharDef.h	/^#define TA_INPUT_END_KEY /;"	d
TA_INSERT_KEY	cmdCharDef.h	/^#define TA_INSERT_KEY /;"	d
TA_LINE_BEGIN_KEY	cmdCharDef.h	/^#define TA_LINE_BEGIN_KEY /;"	d
TA_LINE_END_KEY	cmdCharDef.h	/^#define TA_LINE_END_KEY /;"	d
TA_MOD_KEY_BEGIN	cmdCharDef.h	/^#define TA_MOD_KEY_BEGIN /;"	d
TA_MOD_KEY_DUMMY	cmdCharDef.h	/^#define TA_MOD_KEY_DUMMY /;"	d
TA_MOD_KEY_END	cmdCharDef.h	/^#define TA_MOD_KEY_END /;"	d
TA_MOD_KEY_FLAG	cmdCharDef.h	/^#define TA_MOD_KEY_FLAG /;"	d
TA_MOD_KEY_INT	cmdCharDef.h	/^#define TA_MOD_KEY_INT /;"	d
TA_NEWLINE_KEY	cmdCharDef.h	/^#define TA_NEWLINE_KEY /;"	d
TA_PG_DOWN_KEY	cmdCharDef.h	/^#define TA_PG_DOWN_KEY /;"	d
TA_PG_UP_KEY	cmdCharDef.h	/^#define TA_PG_UP_KEY /;"	d
TA_TAB_KEY	cmdCharDef.h	/^#define TA_TAB_KEY /;"	d
TA_UNDEFINED_KEY	cmdCharDef.h	/^#define TA_UNDEFINED_KEY /;"	d
UNDEFINED_KEY	cmdCharDef.h	/^   UNDEFINED_KEY    = TA_UNDEFINED_KEY,$/;"	e	enum:ParseChar
UNDEFINED_KEY	cmdCharDef.h	/^   UNDEFINED_KEY  = INT_MAX,$/;"	e	enum:ParseChar
_dofile	cmdParser.h	/^   ifstream  _dofile;$/;"	m	class:CmdParser
_history	cmdParser.h	/^   vector<string>   _history;        \/\/ oldest:_history[0],latest:_hist.back()$/;"	m	class:CmdParser
_historyIdx	cmdParser.h	/^   int              _historyIdx;     \/\/ (1) Position to insert history string$/;"	m	class:CmdParser
_readBuf	cmdParser.h	/^   char      _readBuf[READ_BUF_SIZE];\/\/ save the current line input$/;"	m	class:CmdParser
_readBufEnd	cmdParser.h	/^   char*     _readBufEnd;            \/\/ end of string position of _readBuf$/;"	m	class:CmdParser
_readBufPtr	cmdParser.h	/^   char*     _readBufPtr;            \/\/ point to the cursor position$/;"	m	class:CmdParser
_tempCmdStored	cmdParser.h	/^   bool      _tempCmdStored;         \/\/ When up\/pgUp is pressed, current line$/;"	m	class:CmdParser
addHistory	cmdReader.cpp	/^CmdParser::addHistory()$/;"	f	class:CmdParser
deleteChar	cmdReader.cpp	/^CmdParser::deleteChar()$/;"	f	class:CmdParser
deleteLine	cmdReader.cpp	/^CmdParser::deleteLine()$/;"	f	class:CmdParser
getChar	cmdCharDef.cpp	/^getChar(istream& istr)$/;"	f
insertChar	cmdReader.cpp	/^CmdParser::insertChar(char ch, int repeat)$/;"	f	class:CmdParser
main	main.cpp	/^main(int argc, char** argv)$/;"	f
main	testAsc.cpp	/^int main()$/;"	f
moveBufPtr	cmdReader.cpp	/^CmdParser::moveBufPtr(char* const ptr)$/;"	f	class:CmdParser
moveToHistory	cmdReader.cpp	/^CmdParser::moveToHistory(int index)$/;"	f	class:CmdParser
myStrNCmp	main.cpp	/^myStrNCmp(const string& s1, const string& s2, unsigned n)$/;"	f	file:
mybeep	cmdCharDef.cpp	/^void mybeep()$/;"	f
myexit	main.cpp	/^myexit()$/;"	f	file:
mygetc	cmdCharDef.cpp	/^char mygetc(istream& istr)$/;"	f
openDofile	cmdParser.h	/^   bool openDofile(const char* dof) {$/;"	f	class:CmdParser
printPrompt	cmdParser.h	/^   void printPrompt() const { cout << "cmd> "; }$/;"	f	class:CmdParser
readCmd	cmdReader.cpp	/^CmdParser::readCmd()$/;"	f	class:CmdParser
readCmdInt	cmdReader.cpp	/^CmdParser::readCmdInt(istream& istr)$/;"	f	class:CmdParser
resetBufAndPrintPrompt	cmdParser.h	/^   void resetBufAndPrintPrompt() {$/;"	f	class:CmdParser
reset_keypress	cmdCharDef.cpp	/^static void reset_keypress(void)$/;"	f	file:
retrieveHistory	cmdReader.cpp	/^CmdParser::retrieveHistory()$/;"	f	class:CmdParser
returnCh	cmdCharDef.cpp	/^returnCh(int ch)$/;"	f
set_keypress	cmdCharDef.cpp	/^static void set_keypress(void)$/;"	f	file:
stored_settings	cmdCharDef.cpp	/^static struct termios stored_settings;$/;"	v	typeref:struct:termios	file:
taTestOnly	cmdParser.h	/^   void taTestOnly() {}$/;"	f	class:CmdParser
usage	main.cpp	/^usage()$/;"	f	file:
~CmdParser	cmdParser.h	/^   virtual ~CmdParser() {}$/;"	f	class:CmdParser
